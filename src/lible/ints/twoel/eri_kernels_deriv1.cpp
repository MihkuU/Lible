#include <lible/ints/twoel/twoel_detail.hpp>
#include <lible/ints/defs.hpp>

#include <format>
#include <tuple>

namespace LIT = lible::ints::two;

using std::string;

namespace lible::ints::two
{
    const std::map<std::tuple<int, int>, kernel_eri2d1_t> eri2d1_kernels{
        {{0, 0}, eri2d1Kernel<0, 0>},
        {{0, 1}, eri2d1Kernel<0, 1>},
        {{0, 2}, eri2d1Kernel<0, 2>},
        {{0, 3}, eri2d1Kernel<0, 3>},
        {{0, 4}, eri2d1Kernel<0, 4>},
        {{0, 5}, eri2d1Kernel<0, 5>},
        {{0, 6}, eri2d1Kernel<0, 6>},
        {{0, 7}, eri2d1Kernel<0, 7>},
        {{0, 8}, eri2d1Kernel<0, 8>},
        {{0, 9}, eri2d1Kernel<0, 9>},
        {{0, 10}, eri2d1Kernel<0, 10>},
        {{0, 11}, eri2d1Kernel<0, 11>},
        {{0, 12}, eri2d1Kernel<0, 12>},
        {{1, 0}, eri2d1Kernel<1, 0>},
        {{1, 1}, eri2d1Kernel<1, 1>},
        {{1, 2}, eri2d1Kernel<1, 2>},
        {{1, 3}, eri2d1Kernel<1, 3>},
        {{1, 4}, eri2d1Kernel<1, 4>},
        {{1, 5}, eri2d1Kernel<1, 5>},
        {{1, 6}, eri2d1Kernel<1, 6>},
        {{1, 7}, eri2d1Kernel<1, 7>},
        {{1, 8}, eri2d1Kernel<1, 8>},
        {{1, 9}, eri2d1Kernel<1, 9>},
        {{1, 10}, eri2d1Kernel<1, 10>},
        {{1, 11}, eri2d1Kernel<1, 11>},
        {{1, 12}, eri2d1Kernel<1, 12>},
        {{2, 0}, eri2d1Kernel<2, 0>},
        {{2, 1}, eri2d1Kernel<2, 1>},
        {{2, 2}, eri2d1Kernel<2, 2>},
        {{2, 3}, eri2d1Kernel<2, 3>},
        {{2, 4}, eri2d1Kernel<2, 4>},
        {{2, 5}, eri2d1Kernel<2, 5>},
        {{2, 6}, eri2d1Kernel<2, 6>},
        {{2, 7}, eri2d1Kernel<2, 7>},
        {{2, 8}, eri2d1Kernel<2, 8>},
        {{2, 9}, eri2d1Kernel<2, 9>},
        {{2, 10}, eri2d1Kernel<2, 10>},
        {{2, 11}, eri2d1Kernel<2, 11>},
        {{2, 12}, eri2d1Kernel<2, 12>},
        {{3, 0}, eri2d1Kernel<3, 0>},
        {{3, 1}, eri2d1Kernel<3, 1>},
        {{3, 2}, eri2d1Kernel<3, 2>},
        {{3, 3}, eri2d1Kernel<3, 3>},
        {{3, 4}, eri2d1Kernel<3, 4>},
        {{3, 5}, eri2d1Kernel<3, 5>},
        {{3, 6}, eri2d1Kernel<3, 6>},
        {{3, 7}, eri2d1Kernel<3, 7>},
        {{3, 8}, eri2d1Kernel<3, 8>},
        {{3, 9}, eri2d1Kernel<3, 9>},
        {{3, 10}, eri2d1Kernel<3, 10>},
        {{3, 11}, eri2d1Kernel<3, 11>},
        {{3, 12}, eri2d1Kernel<3, 12>},
        {{4, 0}, eri2d1Kernel<4, 0>},
        {{4, 1}, eri2d1Kernel<4, 1>},
        {{4, 2}, eri2d1Kernel<4, 2>},
        {{4, 3}, eri2d1Kernel<4, 3>},
        {{4, 4}, eri2d1Kernel<4, 4>},
        {{4, 5}, eri2d1Kernel<4, 5>},
        {{4, 6}, eri2d1Kernel<4, 6>},
        {{4, 7}, eri2d1Kernel<4, 7>},
        {{4, 8}, eri2d1Kernel<4, 8>},
        {{4, 9}, eri2d1Kernel<4, 9>},
        {{4, 10}, eri2d1Kernel<4, 10>},
        {{4, 11}, eri2d1Kernel<4, 11>},
        {{4, 12}, eri2d1Kernel<4, 12>},
        {{5, 0}, eri2d1Kernel<5, 0>},
        {{5, 1}, eri2d1Kernel<5, 1>},
        {{5, 2}, eri2d1Kernel<5, 2>},
        {{5, 3}, eri2d1Kernel<5, 3>},
        {{5, 4}, eri2d1Kernel<5, 4>},
        {{5, 5}, eri2d1Kernel<5, 5>},
        {{5, 6}, eri2d1Kernel<5, 6>},
        {{5, 7}, eri2d1Kernel<5, 7>},
        {{5, 8}, eri2d1Kernel<5, 8>},
        {{5, 9}, eri2d1Kernel<5, 9>},
        {{5, 10}, eri2d1Kernel<5, 10>},
        {{5, 11}, eri2d1Kernel<5, 11>},
        {{5, 12}, eri2d1Kernel<5, 12>},
        {{6, 0}, eri2d1Kernel<6, 0>},
        {{6, 1}, eri2d1Kernel<6, 1>},
        {{6, 2}, eri2d1Kernel<6, 2>},
        {{6, 3}, eri2d1Kernel<6, 3>},
        {{6, 4}, eri2d1Kernel<6, 4>},
        {{6, 5}, eri2d1Kernel<6, 5>},
        {{6, 6}, eri2d1Kernel<6, 6>},
        {{6, 7}, eri2d1Kernel<6, 7>},
        {{6, 8}, eri2d1Kernel<6, 8>},
        {{6, 9}, eri2d1Kernel<6, 9>},
        {{6, 10}, eri2d1Kernel<6, 10>},
        {{6, 11}, eri2d1Kernel<6, 11>},
        {{6, 12}, eri2d1Kernel<6, 12>},
        {{7, 0}, eri2d1Kernel<7, 0>},
        {{7, 1}, eri2d1Kernel<7, 1>},
        {{7, 2}, eri2d1Kernel<7, 2>},
        {{7, 3}, eri2d1Kernel<7, 3>},
        {{7, 4}, eri2d1Kernel<7, 4>},
        {{7, 5}, eri2d1Kernel<7, 5>},
        {{7, 6}, eri2d1Kernel<7, 6>},
        {{7, 7}, eri2d1Kernel<7, 7>},
        {{7, 8}, eri2d1Kernel<7, 8>},
        {{7, 9}, eri2d1Kernel<7, 9>},
        {{7, 10}, eri2d1Kernel<7, 10>},
        {{7, 11}, eri2d1Kernel<7, 11>},
        {{7, 12}, eri2d1Kernel<7, 12>},
        {{8, 0}, eri2d1Kernel<8, 0>},
        {{8, 1}, eri2d1Kernel<8, 1>},
        {{8, 2}, eri2d1Kernel<8, 2>},
        {{8, 3}, eri2d1Kernel<8, 3>},
        {{8, 4}, eri2d1Kernel<8, 4>},
        {{8, 5}, eri2d1Kernel<8, 5>},
        {{8, 6}, eri2d1Kernel<8, 6>},
        {{8, 7}, eri2d1Kernel<8, 7>},
        {{8, 8}, eri2d1Kernel<8, 8>},
        {{8, 9}, eri2d1Kernel<8, 9>},
        {{8, 10}, eri2d1Kernel<8, 10>},
        {{8, 11}, eri2d1Kernel<8, 11>},
        {{8, 12}, eri2d1Kernel<8, 12>},
        {{9, 0}, eri2d1Kernel<9, 0>},
        {{9, 1}, eri2d1Kernel<9, 1>},
        {{9, 2}, eri2d1Kernel<9, 2>},
        {{9, 3}, eri2d1Kernel<9, 3>},
        {{9, 4}, eri2d1Kernel<9, 4>},
        {{9, 5}, eri2d1Kernel<9, 5>},
        {{9, 6}, eri2d1Kernel<9, 6>},
        {{9, 7}, eri2d1Kernel<9, 7>},
        {{9, 8}, eri2d1Kernel<9, 8>},
        {{9, 9}, eri2d1Kernel<9, 9>},
        {{9, 10}, eri2d1Kernel<9, 10>},
        {{9, 11}, eri2d1Kernel<9, 11>},
        {{9, 12}, eri2d1Kernel<9, 12>},
        {{10, 0}, eri2d1Kernel<10, 0>},
        {{10, 1}, eri2d1Kernel<10, 1>},
        {{10, 2}, eri2d1Kernel<10, 2>},
        {{10, 3}, eri2d1Kernel<10, 3>},
        {{10, 4}, eri2d1Kernel<10, 4>},
        {{10, 5}, eri2d1Kernel<10, 5>},
        {{10, 6}, eri2d1Kernel<10, 6>},
        {{10, 7}, eri2d1Kernel<10, 7>},
        {{10, 8}, eri2d1Kernel<10, 8>},
        {{10, 9}, eri2d1Kernel<10, 9>},
        {{10, 10}, eri2d1Kernel<10, 10>},
        {{10, 11}, eri2d1Kernel<10, 11>},
        {{10, 12}, eri2d1Kernel<10, 12>},
        {{11, 0}, eri2d1Kernel<11, 0>},
        {{11, 1}, eri2d1Kernel<11, 1>},
        {{11, 2}, eri2d1Kernel<11, 2>},
        {{11, 3}, eri2d1Kernel<11, 3>},
        {{11, 4}, eri2d1Kernel<11, 4>},
        {{11, 5}, eri2d1Kernel<11, 5>},
        {{11, 6}, eri2d1Kernel<11, 6>},
        {{11, 7}, eri2d1Kernel<11, 7>},
        {{11, 8}, eri2d1Kernel<11, 8>},
        {{11, 9}, eri2d1Kernel<11, 9>},
        {{11, 10}, eri2d1Kernel<11, 10>},
        {{11, 11}, eri2d1Kernel<11, 11>},
        {{11, 12}, eri2d1Kernel<11, 12>},
        {{12, 0}, eri2d1Kernel<12, 0>},
        {{12, 1}, eri2d1Kernel<12, 1>},
        {{12, 2}, eri2d1Kernel<12, 2>},
        {{12, 3}, eri2d1Kernel<12, 3>},
        {{12, 4}, eri2d1Kernel<12, 4>},
        {{12, 5}, eri2d1Kernel<12, 5>},
        {{12, 6}, eri2d1Kernel<12, 6>},
        {{12, 7}, eri2d1Kernel<12, 7>},
        {{12, 8}, eri2d1Kernel<12, 8>},
        {{12, 9}, eri2d1Kernel<12, 9>},
        {{12, 10}, eri2d1Kernel<12, 10>},
        {{12, 11}, eri2d1Kernel<12, 11>},
        {{12, 12}, eri2d1Kernel<12, 12>}};
}

LIT::kernel_eri2d1_t LIT::deployERI2Deriv1Kernel(const int la, const int lb)
{
    int lab = la + lb;
    int l_max = _eri_kernel_max_l_;
    if (lab > _eri_kernel_max_l_)
    {
        string msg = std::format("deployERI2Deriv1Kernel(): la + lb = {} is larger than the allowed max: {}!\n",
                                 lab, l_max);
        throw std::runtime_error(msg);
    }

    if (eri2d1_kernels.find(std::make_tuple(la, lb)) == eri2d1_kernels.end())
    {
        string msg = std::format("deployERI2Deriv1Kernel(): The combination ({}, {}) was not found!\n", la, lb);
        throw std::runtime_error(msg);
    }

    return eri2d1_kernels.at({la, lb});
}